$(function () {

	// hide spinner
	$(".spinner").hide();
	
	
  	// show spinner on AJAX start
	$(document).ajaxStart(function(){
	  $(".spinner").show();
	});
	
	// hide spinner on AJAX stop
	$(document).ajaxStop(function(){
	  $(".spinner").hide();
	});
	  
	// set delay function
	var delay = (function(){
	  var timer = 0;
	  return function(callback, ms){
	    clearTimeout (timer);
	    timer = setTimeout(callback, ms);
	  };
	})();
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-profile-link").on("click", function() {
		if ($("#user-profile").hasClass("hidden")) {
			$("#user-profile").removeClass("hidden").addClass("show");
			$("#user-notifications").removeClass("show").addClass("hidden");
			$("#user-profile-link").addClass("selected");
			$("#user-notifications-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-profile-link").on("mouseover", function() {
		if ($("#user-profile").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});
	
	// remove underline when mouse out	
	$("#user-profile-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-notifications-link").on("click", function() {
		if ($("#user-notifications").hasClass("hidden")) {
			$("#user-notifications").removeClass("hidden").addClass("show");
			$("#user-profile").removeClass("show").addClass("hidden");
			$("#user-notifications-link").addClass("selected");
			$("#user-profile-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-notifications-link").on("mouseover", function() {
		if ($("#user-notifications").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});	
	
	// remove underline when mouse out
	$("#user-notifications-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	var timer;
	
	// update user info
	$(document).on("change", ".user-info-field", function() {
		
		var this_id = $(this).attr('id');
		var toRemove = 'user_';
		var column = this_id.replace(toRemove,'');
		
		value = $(this).val();
		
		//clear any interval on key up
		clearInterval(timer);
		
		timer = setTimeout(function() { //then give it a second to see if the user is finished
	    	$.ajax({
			  type: "POST",
			  url: "/users/update_profile/" + column + "-" + value
			});
	    }, 500);
		
	});
	
	// update user address info
	$(document).on("keyup", ".user-address-field", function() {
		
		var this_id = $(this).attr('id');
		var toRemove = 'user_user_delivery_addresses_attributes_0_';
		var column = this_id.replace(toRemove,'');

		value = $(this).val();
		
		//clear any interval on key up
		clearInterval(timer);
		
		timer = setTimeout(function() { //then give it a second to see if the user is finished
	    	$.ajax({
			  type: "POST",
			  url: "/users/update_delivery_address/" + column + "-" + value
			});
	    }, 500);
		
	});
	
	// show password change form
	$("#change-password-button").on("click", function() {
		$(this).removeClass("show").addClass("hidden");
		$(".password-change-form").removeClass("hidden").addClass("show");
		$(this).siblings('.change-password-nevermind').removeClass("hidden").addClass("show");
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// hide password change form
	$(".change-password-nevermind").on("click", function() {
		$(this).removeClass("show").addClass("hidden");
		$(".password-change-form").removeClass("show").addClass("hidden");
		$(this).siblings('#change-password-button').removeClass("hidden").addClass("show");
		// prevent page from jumping to the top after click event
		return false;
	});
	
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-drinks-link").on("click", function() {
		if ($("#user-drinks").hasClass("hidden")) {
			$("#user-drinks").removeClass("hidden").addClass("show");
			$("#user-styles").removeClass("show").addClass("hidden");
			$("#user-drinks-link").addClass("selected");
			$("#user-styles-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-drinks-link").on("mouseover", function() {
		if ($("#user-drinks").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});	
	
	// remove underline when mouse out
	$("#user-drinks-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	// find width of the navbar search input box
	navbar_search_width = $("#header-navbar").children(".input-group").width() + 20;
	// make the dropdown search result box match the width of the search input box
	$(".tt-menu").width(navbar_search_width);
	
	// add hover effect to drink preferences page
	$(document).on("mouseover", ".drink-preference-view-option", function() {
		$(this).addClass("almost-chosen");
	});
	
	// add hover effect to drink preferences page
	$(document).on("mouseout", ".drink-preference-view-option", function() {
		$(this).removeClass("almost-chosen");
	});

	// default word cloud if no descriptors exist 
	var word_array = [
          {text: "descriptors", weight: 15},
          {text: "no", weight: 7},
          {text: "yet", weight: 4},
          // ...as many words as you want
      ];
 
	 // descriptor clouds for drink types
	 if (gon.drink_type_descriptor_array != undefined) {
			 // create word cloud and return to view
		     for (i = 0; i < gon.drink_type_descriptor_array.length; i++) { 
			    
			    if ( gon.drink_type_descriptor_array[i][1].length > 0 ) {
				    $("#drink_type_"+gon.drink_type_descriptor_array[i][0]).jQCloud(gon.drink_type_descriptor_array[i][1], {
				  		autoResize: true
				     });
				 } else {
					$("#drink_type_"+gon.drink_type_descriptor_array[i][0]).jQCloud(word_array, {
				  		autoResize: true
				     });
				 }
			 }
	 } else if (gon.drink_descriptor_array != undefined) {
			 
			 // create word cloud and return to view
		     for (i = 0; i < gon.drink_descriptor_array.length; i++) { 
			    if ( gon.drink_descriptor_array[i][1].length > 0 ) {
				    $("#drink_"+gon.drink_descriptor_array[i][0]).jQCloud(gon.drink_descriptor_array[i][1], {
				  		autoResize: true
				     });
				 } else {
					$("#drink_"+gon.drink_descriptor_array[i][0]).jQCloud(word_array, {
				  		autoResize: true
				     });
				 }
			 }
	 } else {
	 	return;
	 }
	 
});
