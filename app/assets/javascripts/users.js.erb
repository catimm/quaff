$(function () {
	// set drink delivery estimate variable
	var new_delivery = gon.new_delivery_preference;
	var drink_per_week_calculation;
	var drinks_per_week = gon.drinks_per_week
    var drinks_in_cooler = gon.drinks_in_cooler
    var estimates_for_delivery;
	var new_value = gon.new_value;
	var new_drink_estimate = gon.new_drink_estimate;
	var cooler_value = gon.cooler_value;
	var cellar_value = gon.cellar_value;
	var cooler_drink_estimate = gon.cooler_drink_estimate;
    var cellar_drink_estimate = gon.cellar_drink_estimate;
    var small_value = gon.small_value;
	var	large_value = gon.large_value;
    var small_format_estimate = gon.small_format_estimate;
    var large_format_estimate = gon.large_format_estimate;

	if (gon.new_delivery_preference == true) {
		$(window).load(function(){
	        $('#customer_first_delivery').modal('show');
	    });
	}
	
	// set delay function
	var delay = (function(){
	  var timer = 0;
	  return function(callback, ms){
	    clearTimeout (timer);
	    timer = setTimeout(callback, ms);
	  };
	})();
	
	// set max drinks to be delivered
	estimates_for_delivery = function(){
		if (drinks_per_week != undefined) {
		    // set drinks per week calculation
		    drink_per_week_calculation = Math.round(drinks_per_week * 2.4);
		    
		    // determine if max number in cooler changes drinks per week calculation
		    if (drinks_in_cooler != undefined) {
		    	if ((drinks_per_week * 2.4) > drinks_in_cooler) {
		    		drink_per_week_calculation = drinks_in_cooler
		    	} 
		    }
	    	// create drink per week estimate value statement
	    	var drinks_per_week_statement = "~ " + drink_per_week_calculation + " drinks in each delivery"
	    	
	    	// insert new drink estimate value statement	
			if (new_value != undefined) {
				// reset new drink estimate value
				new_drink_estimate = Math.round((drink_per_week_calculation * new_value)/100);
				var new_drink_per_week_calculation = "~ " + new_drink_estimate + " will be new to you"
				$("#new_drink_estimate").text(new_drink_per_week_calculation);
				$("#new-preference-2").text("~ " + new_drink_estimate);
			}
			// insert cooler estimate value statement	
			if (cooler_value != undefined) {
				// reset cooler and cellar estimate values
				cooler_drink_estimate = Math.round((drink_per_week_calculation * cooler_value)/100);
				cellar_drink_estimate = (drink_per_week_calculation - cooler_drink_estimate);
				var cooler_drink_per_week_calculation = "~ " + cooler_drink_estimate + " for your cooler; " + cellar_drink_estimate + " for your cellar";
				$("#cooler_drink_estimate").text(cooler_drink_per_week_calculation);
				$("#cooler-preference-2").text("~ " + cooler_drink_estimate);
			}
			// insert small format estimate value statement	
			if (small_value != undefined) {
				// reset small and large format estimate values
				small_format_estimate = Math.round((drink_per_week_calculation * small_value)/100);
				large_format_estimate = (drink_per_week_calculation - small_format_estimate);
				var small_format_delivery_estimate = "~ " + small_format_estimate + " in small format; " + large_format_estimate + " in large";
				$("#small_format_estimate").text(small_format_delivery_estimate);
				$("#small-preference-2").text("~ " + small_format_estimate);
			}
	    } 
	    // insert drink per week estimate value statement
	    $("#drink-delivery-estimate").text(drinks_per_week_statement);
	    
	    //update cost estimate
		delivery_estimate();
	};
	
	// set function to calculate delivery estimate cost
	var delivery_estimate = (function(){
		if ((drink_per_week_calculation !== undefined) && (cooler_value !== undefined) && (small_value !== undefined)) {
			// determine drink numbers for each category
        	var number_of_small_cooler = (drink_per_week_calculation * (cooler_value * 0.01) * (small_value * 0.01));
        	var number_of_large_cooler = (drink_per_week_calculation * (cooler_value * 0.01) * (large_value * 0.01));
        	var number_of_small_cellar = (drink_per_week_calculation * (cellar_value * 0.01) * (small_value * 0.01));
        	var number_of_large_cellar = (drink_per_week_calculation * (cellar_value * 0.01) * (large_value * 0.01));
        	
        	// multiply drink numbers by drink costs
        	var cost_estimate_cooler_small = (gon.small_cooler_cost * number_of_small_cooler);
	        var cost_estimate_cooler_large = (gon.large_cooler_cost * number_of_large_cooler);
	        var cost_estimate_cellar_small = (gon.small_cellar_cost * number_of_small_cellar);
	        var cost_estimate_cellar_large = (gon.large_cellar_cost * number_of_large_cellar);
	        var total_cost_estimate = Math.round(cost_estimate_cooler_small + cost_estimate_cooler_large + cost_estimate_cellar_small + cost_estimate_cellar_large);
	        var cost_estimate_low = Math.round(total_cost_estimate * 0.9);
	        var cost_estimate_high = Math.round(total_cost_estimate * 1.1);
	        var cost_estimate = "$" + cost_estimate_low + " - $" + cost_estimate_high;
	        // send price estimate data to controller
			$.ajax({
			  type: "POST",
			  url: "/users/deliveries_update_preferences/price_estimate-" + total_cost_estimate
			}); 
		} else {
			var cost_estimate = "$TBD"; 
		}
		$("#cost_estimate").text(cost_estimate);
	});
	
	// for new vs repeat slider
	$("#new_percentage").slider({
		tooltip: 'hide'
	});
	$("#new_percentage").on("change", function(slideEvt) {
		new_value = slideEvt.value.newValue;
		var repeat_value = (100 - new_value);
		$("#new-preference").text(new_value);
		$("#new-preference-2").text(new_value + "%");
		$("#repeat-preference").text(repeat_value);
		
		// set new drink estimate value if it has not yet been set
		if (new_drink_estimate == undefined) {
			new_drink_estimate = Math.round((drink_per_week_calculation * new_value)/100);
		}
		
		//update delivery estimates
		estimates_for_delivery();
		
		// temporarily highlight this change
		$("#new_drink_estimate").addClass('estimate-div-highlight-change');
	    setTimeout(function(){
	      $('#new_drink_estimate').removeClass('estimate-div-highlight-change');
	    }, 1500);
	    
		// send data to controller
		delay(function(){
			$.ajax({
			  type: "POST",
			  url: "/users/deliveries_update_preferences/new_percentage-" + new_value
			});
	    }, 1000 );
	});
	
	// for cooler vs cellar slider
	$("#cooler_percentage").slider({
		tooltip: 'hide'
	});
	$("#cooler_percentage").on("change", function(slideEvt) {
		cooler_value = slideEvt.value.newValue;
		cellar_value = (100 - cooler_value);
		$("#cooler-preference").text(cooler_value);
		$("#cooler-preference-2").text(cooler_value + "%");
		$("#cellar-preference").text(cellar_value);
		
		// set cooler and cellar estimate values if they are not yet been set
		if (cooler_drink_estimate == undefined) {
			cooler_drink_estimate = Math.round((drink_per_week_calculation * cooler_value)/100);
			cellar_drink_estimate = (drink_per_week_calculation - cooler_drink_estimate);
		}
		
		//update delivery estimates
		estimates_for_delivery();
		
		// temporarily highlight this change
		$("#cooler_drink_estimate").addClass('estimate-div-highlight-change');
	    setTimeout(function(){
	      $('#cooler_drink_estimate').removeClass('estimate-div-highlight-change');
	    }, 1500);
	    
		// send data to controller
		delay(function(){
			$.ajax({
			  type: "POST",
			  url: "/users/deliveries_update_preferences/cooler_percentage-" + cooler_value
			});
	    }, 1000 );
	});
	
	// for small vs large format slider
	$("#small_percentage").slider({
		tooltip: 'hide'
	});
	$("#small_percentage").on("change", function(slideEvt) {
		small_value = slideEvt.value.newValue;
		large_value = (100 - small_value);
		$("#small-preference").text(small_value);
		$("#small-preference-2").text(small_value + "%");
		$("#large-preference").text(large_value);
		
		// set small and large format estimate values if they are not yet been set
		if (small_format_estimate == undefined) {
			small_format_estimate = Math.round((drink_per_week_calculation * small_value)/100);
			large_format_estimate = (drink_per_week_calculation - small_format_estimate);
		}
		
		//update delivery estimates
		estimates_for_delivery();
		
		// temporarily highlight this change
		$("#small_format_estimate").addClass('estimate-div-highlight-change');
	    setTimeout(function(){
	      $('#small_format_estimate').removeClass('estimate-div-highlight-change');
	    }, 1500);
	    
		// send data to controller
		delay(function(){
			$.ajax({
			  type: "POST",
			  url: "/users/deliveries_update_preferences/small_format_percentage-" + small_value
			});
	    }, 1000 );
	});
	
	// send drinks/week delivery preference to controller
	$("#delivery_preference_drinks_per_week").on("change", function() {
		drinks_per_week = $(this).val();
		
		//update delivery estimates
		estimates_for_delivery();
		
		// temporarily highlight this change
		$("#drink-delivery-estimate").addClass('estimate-div-highlight-change');
	    setTimeout(function(){
	      $('#drink-delivery-estimate').removeClass('estimate-div-highlight-change');
	    }, 1500);
	    
	    if (new_drink_estimate != undefined) {
			$("#new_drink_estimate").addClass('estimate-div-highlight-change');
			    setTimeout(function(){
			      $('#new_drink_estimate').removeClass('estimate-div-highlight-change');
			}, 1500);
		}
			
		if (cooler_drink_estimate != undefined) {
			$("#cooler_drink_estimate").addClass('estimate-div-highlight-change');
		    setTimeout(function(){
		      $('#cooler_drink_estimate').removeClass('estimate-div-highlight-change');
		    }, 1500);
		}
		
		if (small_format_estimate != undefined) {
			$("#small_format_estimate").addClass('estimate-div-highlight-change');
		    setTimeout(function(){
		      $('#small_format_estimate').removeClass('estimate-div-highlight-change');
		    }, 1500);
		}

		// send data to controller
		$.ajax({
		  type: "POST",
		  url: "/users/deliveries_update_preferences/drinks_per_week-" + drinks_per_week
		});
	});
	
	// send max drinks in cellar delivery preference to controller
	$("#delivery_preference_drinks_in_cooler").on("change", function() {
		drinks_in_cooler = $(this).val();
		
		//update delivery estimates
		estimates_for_delivery();
		
		// temporarily highlight this change
		$("#drink-delivery-estimate").addClass('estimate-div-highlight-change');
	    setTimeout(function(){
	      $('#drink-delivery-estimate').removeClass('estimate-div-highlight-change');
	    }, 1500);
	    
		// send data to controller
		$.ajax({
		  type: "POST",
		  url: "/users/deliveries_update_preferences/drinks_in_cooler-" + drinks_in_cooler
		});
	});
	
	// send additional delivery preferences to controller
	$(document).on("keyup", "#delivery_preference_additional", function() {
		var additional = $(this).val();
		delay(function(){
			$.ajax({
			  type: "POST",
			  url: "/users/deliveries_update_preferences/additional-" + additional
			});
	    }, 1000 );
		
	});
	// ensure only one delivery date option is chosen
	$(document).on("change", ".first_delivery_date_chosen", function() {
		$(this).parent().siblings(".drink-preference-choice").children("input").removeAttr('checked');
	});
	
	// send drink type preference to controller
	$(document).on("change", ".drink-type-preference", function() {
		$(this).parent().siblings(".drink-preference-choice").children(".drink-type-preference").removeAttr('checked');
		var this_value = $(this).val();
		$.ajax({
		  type: "POST",
		  url: "/users/deliveries_update_preferences/drink_type_preference-" + this_value
		});
		
	});
	
	// get width of estimate column
	estimate_column_width = $("#estimate-column").width();
	// make estimate tile holder same width as column
	$("#scroller").width(estimate_column_width);
	
	// set function for sticky scroller
	function moveScroller() {
		if(window.location.href.indexOf("users/deliveries/preferences") > -1) {
		    var move = function() {
		        var st = $(window).scrollTop() + $('.navbar.navbar-default.navbar-fixed-top.homeNavbar').outerHeight() + 5;
		        var ot = $("#scroller-anchor").offset().top;
		        var s = $("#scroller");
		        if(st > ot) {
		            s.css({
		                position: "fixed",
		                top: "100px"
		            });
		        } else {
		            if(st <= ot) {
		                s.css({
		                    position: "relative",
		                    top: ""
		                });
		            }
		        }
		    };
		    $(window).scroll(move);
		    move();
		}
	}
	$(document).on("scroll", function() {
	    moveScroller();
	});
	
	// send form id to session variable
	$(".fav-drink-field").one("focus", function() {
		var this_form_id = $(this).attr('id');
		$.ajax({
		  type: "POST",
		  url: "/users/set_search_box_id/" + this_form_id
		});
	});
	
	// remove fav drink
	$(".remove-fav-drink").on("click", function() {
		var this_form_id = $(this).parent().siblings(".fav-drink-form-holder").children("form").children("span").children(".form-control.typeahead.fav-drink-field.tt-input").attr('id');
		$(this).parent().siblings(".fav-drink-form-holder").children("form").children("span").children(".form-control.typeahead.fav-drink-field.tt-input").val('');
		$.ajax({
		  type: "POST",
		  url: "/users/remove_fav_drink/" + this_form_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-profile-link").on("click", function() {
		if ($("#user-profile").hasClass("hidden")) {
			$("#user-profile").removeClass("hidden").addClass("show");
			$("#user-notifications").removeClass("show").addClass("hidden");
			$("#user-profile-link").addClass("selected");
			$("#user-notifications-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-profile-link").on("mouseover", function() {
		if ($("#user-profile").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});
	
	// remove underline when mouse out	
	$("#user-profile-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-notifications-link").on("click", function() {
		if ($("#user-notifications").hasClass("hidden")) {
			$("#user-notifications").removeClass("hidden").addClass("show");
			$("#user-profile").removeClass("show").addClass("hidden");
			$("#user-notifications-link").addClass("selected");
			$("#user-profile-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-notifications-link").on("mouseover", function() {
		if ($("#user-notifications").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});	
	
	// remove underline when mouse out
	$("#user-notifications-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	// show and hide password change form
	$("#change-password-button").on("click", function() {
		if ($(".password-change-form").hasClass("hidden")) {
			$(".password-change-form").removeClass("hidden").addClass("show");
		} else {
			$(".password-change-form").removeClass("show").addClass("hidden");
		}
	});
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-styles-link").on("click", function() {
		if ($("#user-styles").hasClass("hidden")) {
			$("#user-styles").removeClass("hidden").addClass("show");
			$("#user-drinks").removeClass("show").addClass("hidden");
			$("#user-styles-link").addClass("selected");
			$("#user-drinks-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-styles-link").on("mouseover", function() {
		if ($("#user-styles").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});
	
	// remove underline when mouse out	
	$("#user-styles-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	// show user profile block when this link is clicked, if it isn't already showing
	$("#user-drinks-link").on("click", function() {
		if ($("#user-drinks").hasClass("hidden")) {
			$("#user-drinks").removeClass("hidden").addClass("show");
			$("#user-styles").removeClass("show").addClass("hidden");
			$("#user-drinks-link").addClass("selected");
			$("#user-styles-link").removeClass("selected");
		}
	});
	
	// if this link isn't already active, show underline when mouse over
	$("#user-drinks-link").on("mouseover", function() {
		if ($("#user-drinks").hasClass("hidden")) {
			$(this).css("text-decoration", "underline");
		}
	});	
	
	// remove underline when mouse out
	$("#user-drinks-link").on("mouseout", function() {
		$(this).css("text-decoration", "none");
	});
	
	// allow user to dislike beer style
	$(".dislike-style").on("click", function() {
		var this_style_id = $(this).parent().attr('id');
		if ($(this).siblings(".dislike-style-chosen").hasClass("hidden")) {
			// change view/UI
			$(this).removeClass("show").addClass("hidden");
			$(this).siblings(".dislike-style-chosen").removeClass("hidden").addClass("show");
			// add overlay
			$(this).siblings(".overview-tile-4").addClass("show").removeClass("hidden");
			// if like is already chosen, reverse it
			if ($(this).siblings(".like-style-chosen").hasClass("show")) {
				$(this).siblings(".like-style-chosen").removeClass("show").addClass("hidden");	
			}
			if ($(this).siblings(".like-style").hasClass("hidden")) {
				$(this).siblings(".like-style").removeClass("hidden").addClass("show");
			}
		}
		$.ajax({
		  type: "POST",
		  url: "/users/update_styles_preferences/dislike-" + this_style_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// allow user to reverse dislike of beer style
	$(".dislike-style-chosen").on("click", function() {
		var this_style_id = $(this).parent().attr('id');
		if ($(this).hasClass("show")) {
			$(this).removeClass("show").addClass("hidden");
			$(this).siblings(".dislike-style").removeClass("hidden").addClass("show");
			// remove overlay
			$(this).siblings(".overview-tile-4").removeClass("show").addClass("hidden");
		}
		$.ajax({
		  type: "POST",
		  url: "/users/update_styles_preferences/neutral-" + this_style_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// allow user to like beer style
	$(".like-style").on("click", function() {
		var this_style_id = $(this).parent().attr('id');
		if ($(this).siblings(".like-style-chosen").hasClass("hidden")) {
			$(this).removeClass("show").addClass("hidden");
			$(this).siblings(".like-style-chosen").removeClass("hidden").addClass("show");
			// add overlay
			$(this).siblings(".overview-tile-4").addClass("show").removeClass("hidden");
			// if dislike is already chosen, reverse it
			if ($(this).siblings(".dislike-style-chosen").hasClass("show")) {
				$(this).siblings(".dislike-style-chosen").removeClass("show").addClass("hidden");
			}
			if ($(this).siblings(".dislike-style").hasClass("hidden")) {
				$(this).siblings(".dislike-style").removeClass("hidden").addClass("show");
			}
		}
		$.ajax({
		  type: "POST",
		  url: "/users/update_styles_preferences/like-" + this_style_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// search for drinks to add to supply
	$(document).on("keyup", ".supply-drink-search", function() {
		value = $(this).val();
		delay(function(){
			$.ajax({
			  type: "GET",
			  url: "/users/drink_search/1/" + value
			});
	    }, 500 );
	});
	
	// allow user to reverse like of beer style
	$(".like-style-chosen").on("click", function() {
		var this_style_id = $(this).parent().attr('id');
		if ($(this).hasClass("show")) {
			$(this).removeClass("show").addClass("hidden");
			$(this).siblings(".like-style").removeClass("hidden").addClass("show");
			// remove overlay
			$(this).siblings(".overview-tile-4").removeClass("show").addClass("hidden");
		}
		$.ajax({
		  type: "POST",
		  url: "/users/update_styles_preferences/neutral-" + this_style_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// change drink cooler status
	$(document).on("click", ".change-cooler-button", function() {
		// hide this button
		$(this).addClass('hidden');
		//show the remove version of button
		$(this).siblings('*[id*=cooler]').removeClass('hidden');
		// get id of button
		var this_id = $(this).attr('id');
		// send info to controller
		$.ajax({
		  type: "POST",
		  url: "/users/change_supply_drink/" + this_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	
	// change drink cellar status
	$(document).on("click", ".change-cellar-button", function() {
		// hide this button
		$(this).addClass('hidden');
		//show the remove version of button
		$(this).siblings('*[id*=cellar]').removeClass('hidden');
		// get id of button
		var this_id = $(this).attr('id');
		// send info to controller
		$.ajax({
		  type: "POST",
		  url: "/users/change_supply_drink/" + this_id
		});
		// prevent page from jumping to the top after click event
		return false;
	});
	// find width of style preference overview tile
	style_width = $(".overview-tile-3").width();
	half_style_width = style_width/2;
	// make width of selected style overlay equal that of the overview tile
	$(".overview-tile-4").width(style_width);
	// make width of style preference row equal that of the overview tile
	$(".like-style-chosen").width(style_width);
	$(".dislike-style-chosen").width(style_width);
	// make chosen preference appear in middle of tile regardless of tile size
	$(".dislike-style-chosen").children(".dislike-style-middle").css("left",style_width - half_style_width - 18);
	$(".like-style-chosen").children(".like-style-middle").css("left",style_width - half_style_width - 18);
	
	// find width of style preference overview tile for mobile
	mobile_style_width = $(".row-horizon").children(".mobile.style-tile-container").width();
	half_style_width = mobile_style_width/2;
	// make width of selected style overlay equal that of the overview tile
	$(".mobile.overview-tile-4").width(mobile_style_width);
	// make width of style preference row equal that of the overview tile
	$(".mobile.like-style-chosen").width(mobile_style_width);
	$(".mobile.dislike-style-chosen").width(mobile_style_width);
	// make chosen preference appear in middle of tile regardless of tile size
	$(".mobile.dislike-style-chosen").children(".mobile.dislike-style-middle").css("left",mobile_style_width - half_style_width - 18);
	$(".mobile.like-style-chosen").children(".mobile.like-style-middle").css("left",mobile_style_width - half_style_width - 18);
	
	// find width of the navbar search input box
	navbar_search_width = $("#header-navbar").children(".input-group").width() + 20;
	// make the dropdown search result box match the width of the search input box
	$(".tt-menu").width(navbar_search_width);
	
	// add hover effect to drink preferences page
	$(document).on("mouseover", ".drink-preference-view-option", function() {
		$(this).addClass("almost-chosen");
	});
	
	// add hover effect to drink preferences page
	$(document).on("mouseout", ".drink-preference-view-option", function() {
		$(this).removeClass("almost-chosen");
	});
	
	// to add already used descriptor to this user's list of descriptors for drink type
	$(document).on("click", ".token-input-list-facebook_rating li", function() {
		var target_id = $(this).parent().siblings('form').children('input.form-control').attr('id');
		var target = "#" + target_id
		$(this).addClass("hide");
		var descriptor = $(this).children('p').html();
		$(target).tokenInput("add", {id: descriptor, name: descriptor});
		return false;
	});
	
	$( ".add-descriptors-field" ).each(function() {
	  var this_id = $(this).attr('id');
	  $("#" + this_id).tokenInput('/beers/descriptors.json', {
			theme: 'facebook',
			tokenLimit: 5,
			placeholder: 'Choose from list or add your own (separate w/comma)',
			minChars: 2,
		    allowFreeTagging: true,
		    preventDuplicates: true,
		    zindex: 9999,
		    hintText: 'Type drink descriptor (e.g. citrusy, piney, etc.)',
		    prePopulate: $("#" + this_id).data('load')
		});
	});
	
	// default word cloud if no descriptors exist 
	var word_array = [
          {text: "descriptors", weight: 15},
          {text: "no", weight: 7},
          {text: "yet", weight: 4},
          // ...as many words as you want
      ];
 
	 // descriptor clouds for drink types
	 if (gon.drink_type_descriptor_array != undefined) {
			 // create word cloud and return to view
		     for (i = 0; i < gon.drink_type_descriptor_array.length; i++) { 
			    if ( gon.drink_type_descriptor_array[i][1].length > 0 ) {
				    $("#drink_type_"+gon.drink_type_descriptor_array[i][0]).jQCloud(gon.drink_type_descriptor_array[i][1], {
				  		autoResize: true
				     });
				 } else {
					$("#drink_type_"+gon.drink_type_descriptor_array[i][0]).jQCloud(word_array, {
				  		autoResize: true
				     });
				 }
			 }
	 } else if (gon.drink_descriptor_array != undefined) {
			 // create word cloud and return to view
		     for (i = 0; i < gon.drink_descriptor_array.length; i++) { 
			    if ( gon.drink_descriptor_array[i][1].length > 0 ) {
				    $("#drink_"+gon.drink_descriptor_array[i][0]).jQCloud(gon.drink_descriptor_array[i][1], {
				  		autoResize: true
				     });
				 } else {
					$("#drink_"+gon.drink_descriptor_array[i][0]).jQCloud(word_array, {
				  		autoResize: true
				     });
				 }
			 }
	 } else {
	 	return;
	 }
});
